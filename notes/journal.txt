19/09/2020
Installé au coworking de Lacanau, avec Rémi, Ben, Rémy
Matériel OK, "overscan" désagréable de mon laptop sur second moniteur
Assez d'espace et d'aération pour limiter le masque Covid

Thèmes JAM : Ships, Maps, Chaos

Travail sur document de design. J'ai pris connaissance du thème hier soir et ai quelques idées

Travail sur plan. Je commence à sortir des éléments du scope à la vue du nombre d'éléments à prévoir :)

Je lis la documentation de Tiled pour voir s'il peut convenir à mes besoins
Formats : https://doc.mapeditor.org/en/stable/manual/export/

Je ne suis pas convaincu par le mécanisme de Gridmaps Godot :
https://docs.godotengine.org/fr/stable/tutorials/3d/using_gridmaps.html
Mais pas ennvie de réinventer la roue donc il faut que je fasse simple...

Utiliser format JSON d'exportation Tiled semble raisonnable

Points Godot à prototyper rapidement :
 - Chargement JSON dans Godot ?
 - Instanciation assets glTF programmatiquement ?

Ensuite sera-t-il pratique d'avoir un tileset 2D pour la carte et de remodéliser en 3D ?
Idéal sera de faire un rendu des assets depuis Blender, mais long !
Sinon utiliser tileset "de prototypage", pas inclus dans le jeu final

J'installe Tiled 1.4.2 pour voir s'il peut me faire gagner du temps par rapport à de la génération procédurale ou une carte hardcodée

Testé, va me prendre trop de temps : trouver une tileset, apprendre GUI, etc.

=> je laisse tomber l'approche par "tiles" : à la place, modélisation explicite d'îles sous forme de "gros" assets
=> placement programmatique de ces assets

J'exporte un vague placeholder pour le joueur
Blender : gltb export, format "gltf", Limit too select object, Y up, Materials
Options recommandées par https://www.youtube.com/watch?v=grPbk-bfMO4&ab_channel=SavvyBarbarian
Export dans un répertoire "assets/models" créé dans le projet Godot
Import en "Open Anyway" marche bien
Asset se met à jour "en temps réel" dans Godot si réexporté
Des soucis de réimport après un certain temps => réimporté comme "New Inherited Scene"
Idem :
 editor/editor_file_system.cpp:1766 - BUG: File queued for import, but can't be imported!
 editor/editor_file_system.cpp:1767 - Method failed.

Je n'arrive pas à trouver un workflow robuste

En discussion avec "QbieShay#4610" sur Discord, qui cherche à m'aider et semble travailler en mode source sur Godot

Reproduit mon problème mais n'a pas trouvé de workaround malgré ses efforts

J'ai fait une pause repas entre temps

Je vais regarder les mécanismes 2D de Godot, j'envisage un rendu simple avec des formes géométriques ?
Je vois cité Polygon2D
Il ne semble pas y avoir d'éditeur pour construire des formes simples

A priori je peux dessiner programmatiquement via la méthode _draw() de CanvasItem :
https://www.youtube.com/watch?v=Xa0tHyZdyeM&ab_channel=GodotTutorials

On peut centrer la caméra sur le joueur avec un noeud Camera2D :
https://www.youtube.com/watch?v=zhUuxgDT0NA&ab_channel=GodotTutorials

On peut utiliser plusieurs viewports pour la minimap :
https://www.youtube.com/watch?v=euQZ-jddoBo&ab_channel=GodotTutorials
Permet aussi de mélanger 2D et 3D !
=> Plus simple finalement d'ajouter des objets "HUD" en fin de scène principale


Après recherche sur github et étude de :
https://github.com/godotengine/godot/issues/15853

Passer "Import" > "Material"> "Storage" à "Built-in" semble résoudre le problème !
Je suis en glb, semble bien fonctionner

QbieShay me conseille de relire cette page, et va y ajouter ce point de documentation :
https://docs.godotengine.org/en/latest/getting_started/workflow/assets/importing_scenes.html

Chouette doc sur animation KinematicBody et suivi camera (exactement là où j'en suis) :
https://www.youtube.com/watch?time_continue=52&v=rOA8i_clm1Y&feature=emb_logo&ab_channel=KidsCanCode

Camera + "2 viewports" + "Preview" génial pour mettre au point cible caméra !

J'ai vaguement un modèle de joueur et une caméra. Perfectible (InterpolatedCamera dépréciée et difficile à régler),
mais permet d'avancer

Transparence eau : voir ce tutorial :
https://www.youtube.com/watch?v=jbYrpKWTlpw&ab_channel=Maujoe%27sMedley

Points essentiels : Spacial Material, Flags > Transparent, Albedo > diminuer Alpha

Partage sur github (repo privé pour l'instant...)
Je fais un "git config core.autocrlf false" par sécurité (pour ne pas que les fichiers Godot soient modifiés)

Déplacements significativement améliorés en cappant la vitesse

Algo "wrap around" : pas si simple ; il faut probablement ou afficher les objets "proches"
(pose problème de distance max et de calcul de collision avec frustrum), ou afficher des
objets en doubles / triple (approches "9 écrans") + modulo coordonnées joueur
Je google (le terme utilise semble être "wrap around world")
https://forum.unity.com/threads/flat-seamlessly-wrapping-3d-world.180556/
https://community.khronos.org/t/continuous-world-world-wrapping/29258/13

Le multi-rendu me semble compliqué => plutôt modulo sur coordonnées joueur et
spacial search sur rectangle (range query) ou cercle (radius query) centré sur le joueur,
suivant ce qui est le plus simple (+ multiplier par 9 les assets) :
https://blog.mapbox.com/a-dive-into-spatial-search-algorithms-ebd0c5e39d2a

Godot implémente le frustum culling donc il est peut-être plus simple d'afficher 9 fois plus d'objets
et de faire un modulo pour garder les coordonnées du joueur dans le carré central ! Au pire j'ajusterai
la taille de la grille pour avoir plus de perfs

Motif de base carte : fichier ascii de NxN caractères, espace = rien, sinon un identifiant (caractère ASCII)
Prendre un N multiple de 9 pour avoir les 9 cartes
On va perdre l'"organicité" d'un placement à la main => faire plutôt une scène dans Blender + script export ?
Ou, plus simple : une scène Godot pour carte globale,et l'instancier 9 fois !
Je gagne en plus les rotations
Pour la mini-carte, extraire des coordonnées de cette scène au démarrage sera le plus simple...

Bilan de la journée : débloqué grâce à la communauté. Maintenant que j'en suis au codage du jeu
(noeuds de base en place et suffisamment compris), bonne sensation de productivité et de
possibilités offertes par le moteur ! Rassuré en particulier par la facilité à instancier
programmatiquement, et l'approche par scènes commence à "cliquer"


20/09/2020
A la réflection, l'approche "torique" va compliquer la mini-carte
Je vais plutôt tenter de faire une unique carte au milieu de l'océan, avec peut-être une flèche pour guider
le joueur s'il est perdu
Je pourrai toujours utiliser cette carte comme base d'instanciation si finalement nécessaire

A l'usage, j'ai pu faire une grande carte à coup de copier-coller et rotations
La performance semble OK et l'aire de jeu suffisante

Pour la minicarte :
- je vais faire un mode "sonar" fixe sur la minicarte mais lié à la distance aux rochers et objectifs
- si objet "révélé" par la carte, il est constamment allumé

J'ai un peu (trop) joué avec les effets de transparence et le ciel procédural

Ajout d'antialiasing et d'un peu de blur distant pour éviter "popping"

Export EXE OK : le livrable sera un exe + un pck, dans un zip

HUD : apparemment juste dessiner des conteneurs 2D "à la fin" suffit => ajout à la scène principale

Support antialiasing limité sur _draw() (prévu en version 4.0), les cercles en particulier passent mal
=> je vais me limiter à des formes petites et simples

Minimap joueur et rochers faite ; j'ai un peu de mal à contrôler les couleurs (mauvaises interaction avec alpha ?)

Pour la détection de la proximité des parchemins, je dois pouvoir utiliser "Area" => marche bien